My_test account:

words: 
engine over neglect science fatigue dawn axis parent mind man escape era goose border invest slab relax bind desert hurry useless lonely frozen morning'

passphrase:
RobertPauslon

entropy: 256

xtended_private_key: tprv8ZgxMBicQKsPfQJYjuFAso9x6STzmUdMh5U8CQqqQUTgtQHBHCq4C7FseeeZg15L16UeSwbrLwJRTXNPQsJQwqvbBA11sn4M6c3jR1LwAQP



Neo4j Database:

Database: wallet same

When wallet creates new address (to receive or for change):
CREATE (:address {address:<"address">, acc_index:<index>, type:<change/recipient>, created:<timestamp>})

example:
CREATE a = (:address {address:"address3", acc_index:2, type:"change", created:timestamp()})
RETURN a

When the wallet learns about a new utxo:
MATCH (n:address {address : <"address">})
CREATE p = (:utxo {address:<"address">, transaction_id:<transaction_id>, out_index:<out_index>, local_index:<local_index>, spent:<boolean>})-[:BELONGS]->(n)
RETURN p

Example:
MATCH (n:address {address : "address1"})
CREATE p = (:utxo {address:"address1", transaction_id:1234, out_index:0, local_index:1, spent:False})-[:BELONGS]->(n)
RETURN p

when wallet creates new transaction:
CREATE (TxOut {id:<transaction_hash>, inputs: [<index_utxo_0>,<index_utxo_0>..<index_utxo_0>], outputs: [<out_0>,<out_1>..<out_n>] confirmations:<from 0 to 6>, created:<timestamp>})

Example:
CREATE (:TxOut {id:2222, inputs: [0,1], outputs: ["out_0","out_1","out_n"], confirmations:0, created:timestamp()})

MATCH (u: utxo {index:TxOut.inputs[n]} )
CREATE (new_TxOut)-[:SPENT]->(u)
SET u.spent = True

EXAMPLE:
MATCH (n:TxOut {id:2222})
UNWIND n.inputs AS ins
MATCH coins = (u:utxo {local_index:ins})
FOREACH (coin IN nodes(coins) |
CREATE (coin)<-[:SPENT]-(n))

##AT THE SAME TIME!!!##:
CREATE (n:TxOut {id:2222, inputs: [0,1], outputs: ["out_0","out_1","out_n"], confirmations:0, created:timestamp()})
WITH n
UNWIND n.inputs AS ins
MATCH coins = (u:utxo {local_index:ins})
FOREACH (coin IN nodes(coins) |
CREATE (coin)<-[:SPENT]-(n))


update balance:
Run an update-balance query on all the utxoAddresses every hour.

When confirmations in transactions surpass 6 then:
MATCH (n:TxOut {id:2222})
SET n.confirmations=6
RETURN n

1- Run an update-balance query on all the utxoAddresses used in transaction 

2- 
MATCH p = (u)<-[:SPENT]-(:TxOut {id:2222})
SET u.spent=true
RETURN p

Cleanning_database:
run once a day the following:
MATCH (a: address)
WHERE NOT (a)--() AND (timestamp() - a.created )>2592000000
DELETE a


Look for addresses with balances:
MATCH (u:utxo {spent:false})--(a)
RETURN u,a